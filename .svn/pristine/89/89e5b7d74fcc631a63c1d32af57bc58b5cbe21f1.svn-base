package m.w.sys.service;

import java.io.File;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import javax.servlet.http.HttpServletRequest;

import m.w.App;
import m.w.core.dto.DataGrid;
import m.w.core.dto.KeResult;
import m.w.core.dto.Result;
import m.w.core.service.WxIdService;
import m.w.frs.mgserver.domain.DeviceResolutionRule;
import m.w.frs.mgserver.domain.UserToken;
import m.w.frs.mgserver.service.DeviceResolutionRuleService;
import m.w.frs.mgserver.service.UserTokenService;
import m.w.sys.domain.Atta;
import m.w.sys.domain.AttaType;
import m.w.sys.domain.UploadConf;
import m.w.sys.quartz.domain.PicConfig;
import m.w.sys.util.Consts;
import m.w.sys.util.Users;
import net.coobird.thumbnailator.Thumbnails;

import org.apache.commons.io.FilenameUtils;
import org.apache.commons.lang3.StringUtils;
import org.nutz.dao.Cnd;
import org.nutz.ioc.loader.annotation.Inject;
import org.nutz.ioc.loader.annotation.IocBean;
import org.nutz.lang.Files;
import org.nutz.lang.Times;
import org.nutz.mvc.Mvcs;
import org.nutz.mvc.upload.FieldMeta;
import org.nutz.mvc.upload.TempFile;

import com.qiniu.util.Auth;

@IocBean(fields = "dao")
public class FileService extends WxIdService<Atta> {
	private static final String UPLOAD_DIR = "/upload/";
	public static final String UPLOAD_ROOT_DIR = Mvcs.getHttpSession()
			.getServletContext().getRealPath(UPLOAD_DIR);
	public static final String UPLOAD_URL = Mvcs.getHttpSession()
			.getServletContext().getContextPath()
			+ UPLOAD_DIR;
	private static final String[] IMAGE_FILES = "gif;jpg;jpeg;png;bmp"
			.split(";");

	private static final List<String> DIRS = Arrays
			.<String> asList(new String[] { "image", "flash", "media", "file" });

	private Auth auth = Auth.create(App.getQiNiuAccessKey(),
			App.getQiNiuSecretKey());

	@Inject
	private UserTokenService userTokenService;

	@Inject
	private DeviceResolutionRuleService deviceResolutionRuleService;
	
	public DataGrid attas(Collection<Long> ids) {
		return this.datagrid(Cnd.where("id", "in", ids));
	}


	public PicConfig getPicConfig(String token) {
		UserToken userTokenTmp = userTokenService.getByToken(token);
		DeviceResolutionRule rule = deviceResolutionRuleService
				.getByResolution(userTokenTmp.getResolution());
		if(rule==null)
			rule=deviceResolutionRuleService.getDefaultResolution();
		PicConfig picc=new PicConfig("1",rule.getRule1().split("*")[0],rule.getRule1().split("*")[1]);
		return picc;
	}
	
	public String getQiniuPrivateUrl(String url,String token) {
		PicConfig picConfig= this.getPicConfig(token);
		if (StringUtils.isEmpty(url))
			return url;
		String prefix = App.getQiNiuPrefix();
		if (App.getQiNiuBucketIsPublic()) {
			return url;
		} else {
			String key = "";
			if (url.indexOf(prefix) > 0) {
				key = url.substring(url.indexOf(prefix));
				String eToken = Consts.qiniuEandToken.get(key);
				if (eToken != null) {
					String unixTime = eToken.substring(
							eToken.indexOf("e=") + 2, eToken.indexOf("&"));
					Long timestamp = Long.parseLong(unixTime) * 1000;
					Long now = new Date().getTime();
					if (now > timestamp) {
						return getPrivateUrl(url, key,picConfig);
					} else {
						return url + "?" + eToken;
					}
				} else {
					return getPrivateUrl(url, key,picConfig);
				}
			} else
				return url;
		}
	}

	private String getPrivateUrl(String url, String key,PicConfig picConfig) {
		String qiniuPrivateUrl = auth.privateDownloadUrl(url+"?"+(picConfig==null?"":picConfig.getConfigStr()));
		String nEandToken = qiniuPrivateUrl.split("\\?")[1];
		Consts.qiniuEandToken.put(key, nEandToken);
		return qiniuPrivateUrl;
	}

	/**
	 * 一次上传一批文件
	 * 
	 * @param type
	 * @param info
	 * @param temps
	 * @param conf
	 * @return
	 */
	public Result xupload(AttaType type, Atta info, TempFile[] temps,
			UploadConf conf) {
		if (temps == null) {
			return Result.err("没有上传任何文件");
		}

		List<Atta> list = new ArrayList<Atta>(temps.length);
		for (TempFile temp : temps) {
			FieldMeta meta = temp.getMeta();
			File file = temp.getFile();

			Long fileSize = file.length();
			String mime = meta.getContentType();
			String extName = meta.getFileExtension();
			String rawName = meta.getFileLocalName();

			String filePath = FilenameUtils.concat(
					FilenameUtils.concat(type.toString(), Times.format(
							new SimpleDateFormat("yyyyMMdd"), new Date())),
					UUID.randomUUID().toString() + extName);

			File newFile = new File(UPLOAD_ROOT_DIR, filePath);

			try {
				Files.move(file, newFile);
				Atta atta = new Atta();
				atta.setFileType(type);
				atta.setFileSize(fileSize);
				atta.setRawName(rawName);
				atta.setFilePath(filePath);
				atta.setExtName(extName);
				atta.setMime(mime);
				atta.setNotes(info.getNotes());
				atta.setUserId(Users.user().getId());
				atta.setUserName(Users.user().getUsername());
				atta.setOnTime(new Date());
				insert(atta);
				list.add(atta);
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		return Result.ok("上传了" + temps.length + "个文件，其中" + list.size()
				+ "个上传成功，" + (temps.length - list.size()) + "个上传失败。", list);
	}

	public KeResult keupload(AttaType type, String notes, TempFile temp,
			UploadConf conf) {
		KeResult ke = null;
		FieldMeta meta = temp.getMeta();
		File file = temp.getFile();

		Long fileSize = file.length();
		String mime = meta.getContentType();
		String extName = meta.getFileExtension();
		String rawName = meta.getFileLocalName();

		String dir = type.toString();

		String path = FilenameUtils.concat(
				Times.format(new SimpleDateFormat("yyyyMMdd"), new Date()),
				UUID.randomUUID().toString() + extName);
		String filePath = FilenameUtils.concat(dir, path);
		String thumbPath = filePath;

		File newFile = new File(UPLOAD_ROOT_DIR, filePath);

		try {
			if (AttaType.image.equals(type)) {
				thumbPath = FilenameUtils.concat("thumb", path).replaceAll(
						"\\\\", "/");
				Thumbnails
						.of(file)
						.size(640, 480)
						.toFile(Files.createFileIfNoExists(FilenameUtils
								.concat(UPLOAD_ROOT_DIR, thumbPath)));
			}

			Files.move(file, newFile);

			Atta atta = new Atta();
			atta.setFileType(type);
			atta.setFileSize(fileSize);
			atta.setRawName(rawName);
			atta.setFilePath(filePath);
			atta.setExtName(extName);
			atta.setMime(mime);
			atta.setNotes(notes);
			atta.setUserId(Users.user().getId());
			atta.setUserName(Users.user().getUsername());
			atta.setOnTime(new Date());
			insert(atta);
			ke = KeResult.ok(UPLOAD_URL + thumbPath, atta);
		} catch (IOException e) {
			e.printStackTrace();
			ke = KeResult.err(e.getMessage());
		}
		return ke;
	}

	@SuppressWarnings({ "rawtypes", "unchecked" })
	public Object kebrowse(HttpServletRequest request) {
		String rootPath = UPLOAD_ROOT_DIR;
		String rootUrl = UPLOAD_URL;

		String dirName = request.getParameter("dir");
		if (dirName != null) {
			if (!DIRS.contains(dirName)) {
				return KeResult.err("无效的目录名");
			}
			rootPath = FilenameUtils.concat(rootPath, dirName);
			rootUrl = FilenameUtils.concat(rootUrl, dirName);
			File saveDirFile = new File(rootPath);
			if (!saveDirFile.exists()) {
				saveDirFile.mkdirs();
			}
		}
		// 根据path参数，设置各路径和URL
		String path = request.getParameter("path") != null ? request
				.getParameter("path") : "";
		String currentPath = FilenameUtils.concat(rootPath, path);
		String currentUrl = FilenameUtils.concat(rootUrl, path);
		String currentDirPath = path;
		String moveupDirPath = "";
		if (!"".equals(path)) {
			String str = currentDirPath.substring(0,
					currentDirPath.length() - 1);
			moveupDirPath = str.lastIndexOf("/") >= 0 ? str.substring(0,
					str.lastIndexOf("/") + 1) : "";
		}

		// 排序形式，name or size or type
		String order = request.getParameter("order") != null ? request
				.getParameter("order").toLowerCase() : "name";

		// 不允许使用..移动到上一级目录
		if (path.indexOf("..") >= 0) {
			return KeResult.err("目录无法访问");
		}
		// 最后一个字符不是/
		if (!"".equals(path) && !path.endsWith("/")) {
			return KeResult.err("参数无效");
		}
		// 目录不存在或不是目录
		File currentPathFile = new File(currentPath);
		if (!currentPathFile.isDirectory()) {
			return KeResult.err("目录");
		}

		// 遍历目录取的文件信息
		List<Hashtable> fileList = new ArrayList<Hashtable>();
		if (currentPathFile.listFiles() != null) {
			for (File file : currentPathFile.listFiles()) {
				Hashtable<String, Object> hash = new Hashtable<String, Object>();
				String fileName = file.getName();
				if (file.isDirectory()) {
					hash.put("is_dir", true);
					hash.put("has_file", (file.listFiles() != null));
					hash.put("filesize", 0L);
					hash.put("is_photo", false);
					hash.put("filetype", "");
				} else if (file.isFile()) {
					String fileExt = Files.getSuffixName(fileName);
					hash.put("is_dir", false);
					hash.put("has_file", false);
					hash.put("filesize", file.length());
					hash.put("is_photo", Arrays.<String> asList(IMAGE_FILES)
							.contains(fileExt));
					hash.put("filetype", fileExt);
				}
				hash.put("filename", fileName);
				hash.put("datetime",
						new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(file
								.lastModified()));
				fileList.add(hash);
			}
		}

		if ("size".equals(order)) {
			Collections.sort(fileList, new SizeComparator());
		} else if ("type".equals(order)) {
			Collections.sort(fileList, new TypeComparator());
		} else {
			Collections.sort(fileList, new NameComparator());
		}
		Map result = new HashMap();
		result.put("moveup_dir_path", moveupDirPath);
		result.put("current_dir_path", currentDirPath);
		result.put("current_url", currentUrl);
		result.put("total_count", fileList.size());
		result.put("file_list", fileList);
		return result;
	}

}

@SuppressWarnings("rawtypes")
class NameComparator implements Comparator {
	public int compare(Object a, Object b) {
		Hashtable hashA = (Hashtable) a;
		Hashtable hashB = (Hashtable) b;
		if (((Boolean) hashA.get("is_dir")) && !((Boolean) hashB.get("is_dir"))) {
			return -1;
		} else if (!((Boolean) hashA.get("is_dir"))
				&& ((Boolean) hashB.get("is_dir"))) {
			return 1;
		} else {
			return ((String) hashA.get("filename")).compareTo((String) hashB
					.get("filename"));
		}
	}
}

@SuppressWarnings("rawtypes")
class SizeComparator implements Comparator {
	public int compare(Object a, Object b) {
		Hashtable hashA = (Hashtable) a;
		Hashtable hashB = (Hashtable) b;
		if (((Boolean) hashA.get("is_dir")) && !((Boolean) hashB.get("is_dir"))) {
			return -1;
		} else if (!((Boolean) hashA.get("is_dir"))
				&& ((Boolean) hashB.get("is_dir"))) {
			return 1;
		} else {
			if (((Long) hashA.get("filesize")) > ((Long) hashB.get("filesize"))) {
				return 1;
			} else if (((Long) hashA.get("filesize")) < ((Long) hashB
					.get("filesize"))) {
				return -1;
			} else {
				return 0;
			}
		}
	}
}

@SuppressWarnings("rawtypes")
class TypeComparator implements Comparator {
	public int compare(Object a, Object b) {
		Hashtable hashA = (Hashtable) a;
		Hashtable hashB = (Hashtable) b;
		if (((Boolean) hashA.get("is_dir")) && !((Boolean) hashB.get("is_dir"))) {
			return -1;
		} else if (!((Boolean) hashA.get("is_dir"))
				&& ((Boolean) hashB.get("is_dir"))) {
			return 1;
		} else {
			return ((String) hashA.get("filetype")).compareTo((String) hashB
					.get("filetype"));
		}
	}
}
