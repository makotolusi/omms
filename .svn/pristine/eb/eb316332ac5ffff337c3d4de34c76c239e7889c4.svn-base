package m.w.sys.util;

import java.util.List;
import java.util.Map;
import java.util.Set;

import m.w.App;
import redis.clients.jedis.Jedis;
import redis.clients.jedis.JedisPool;
import redis.clients.jedis.JedisPoolConfig;

public class JedisTemplate {
	private static JedisPool pool = null;

	/**
	 * 构建redis连接池
	 * 
	 * @param ip
	 * @param port
	 * @return JedisPool
	 */
	public static JedisPool getPool() {
		if (pool == null) {
			JedisPoolConfig config = new JedisPoolConfig();
			// 控制一个pool可分配多少个jedis实例，通过pool.getResource()来获取；
			// 如果赋值为-1，则表示不限制；如果pool已经分配了maxActive个jedis实例，则此时pool的状态为exhausted(耗尽)。
			config.setMaxIdle(10);
			config.setMaxTotal(100);
			// 表示当borrow(引入)一个jedis实例时，最大的等待时间，如果超过等待时间，则直接抛出JedisConnectionException；
			config.setMaxWaitMillis(1000 * 100);
			// 在borrow一个jedis实例时，是否提前进行validate操作；如果为true，则得到的jedis实例均是可用的；
			config.setTestOnBorrow(true);
			pool = new JedisPool(config, App.getRedisUrl(), Integer.parseInt(App.getRedisPort()), 2000, App.getRedisPass(), 0, App.getRedisDb());
//			pool = new JedisPool(config, "10.59.94.45", 6379, 2000,"mg123456", 0, "mgserver");
		}
		return pool;
	}

	public static JedisPool getPool2() {
		if (pool == null) {
			JedisPoolConfig config = new JedisPoolConfig();
			// 控制一个pool可分配多少个jedis实例，通过pool.getResource()来获取；
			// 如果赋值为-1，则表示不限制；如果pool已经分配了maxActive个jedis实例，则此时pool的状态为exhausted(耗尽)。
			config.setMaxIdle(10);
			config.setMaxTotal(100);
			// 表示当borrow(引入)一个jedis实例时，最大的等待时间，如果超过等待时间，则直接抛出JedisConnectionException；
			config.setMaxWaitMillis(1000 * 100);
			// 在borrow一个jedis实例时，是否提前进行validate操作；如果为true，则得到的jedis实例均是可用的；
			config.setTestOnBorrow(true);
			pool = new JedisPool(config, "10.59.94.45", 6379, 2000,"mg123456", 0, "mgserver");
		}
		return pool;
	}
	public static void destoryPoll() {
		if (pool != null)
			pool.close();
	}

	public static void hmset(String key,Map<String,String> map) {
		Jedis jedis = null;
		try {
			jedis = JedisTemplate.getPool().getResource();// cache
			jedis.hmset(key, map);
		} catch (Exception e) {
		}finally{
			jedis.close();
		}
	}

	public static void set(String key,String value) {
		Jedis jedis = null;
		try {
			jedis = JedisTemplate.getPool().getResource();// cache
			jedis.set(key, value);
		} catch (Exception e) {
		}finally{
			jedis.close();
		}
	}
	public static List<String> hmget(String key,String...fields) {
		Jedis jedis = null;
		try {
			jedis = JedisTemplate.getPool().getResource();// cache
			return jedis.hmget(key, fields);
		} catch (Exception e) {
			return null;
		}finally{
			jedis.close();
		}
	}
	public static void set(String key,String value,int seconds) {
		Jedis jedis = null;
		try {
			jedis = JedisTemplate.getPool().getResource();// cache
			jedis.set(key, value);
			jedis.expire(key, seconds);
		} catch (Exception e) {
		}finally{
			jedis.close();
		}
	}
	public static Set<String> keys(String keys) {
		Jedis jedis = null;
		try {
			jedis = JedisTemplate.getPool().getResource();// cache
			return jedis.keys(keys);
		} catch (Exception e) {
			return null;
		}finally{
			jedis.close();
		}
	}
	
	public static void main(String[] args) throws InterruptedException {
		Jedis j = JedisTemplate.getPool().getResource();
		// j.set("foo","xxx");
		j.expire("foo", 5);
		Thread.sleep(4000);
		System.out.println(j.get("foo"));
	}
}
