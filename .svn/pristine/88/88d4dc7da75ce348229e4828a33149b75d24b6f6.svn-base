package m.w.frs.mgserver.module.rest;

import java.util.Arrays;
import java.util.List;

import javax.servlet.http.HttpServletRequest;

import m.w.frs.mgserver.domain.SnapUpOrder;
import m.w.frs.mgserver.domain.SnapUpResult;
import m.w.frs.mgserver.service.snapup.ActivitySnappingUpService;
import m.w.frs.mgserver.service.snapup.SnapupOrderExpireSubscribe;
import m.w.security.AuthFilter;
import m.w.sys.util.RedisManager;

import org.nutz.ioc.loader.annotation.Inject;
import org.nutz.ioc.loader.annotation.IocBean;
import org.nutz.log.Log;
import org.nutz.log.Logs;
import org.nutz.mvc.adaptor.JsonAdaptor;
import org.nutz.mvc.annotation.AdaptBy;
import org.nutz.mvc.annotation.At;
import org.nutz.mvc.annotation.By;
import org.nutz.mvc.annotation.Filters;
import org.nutz.mvc.annotation.POST;

@At("/ApCommonServices")
@IocBean
public class SnapUpAppServices {

	@Inject
	private ActivitySnappingUpService activitySnappingUpService;

	private static Log log = Logs.get();

	/** 抢购 */
	@At({ "/snapup" })
	@POST
	@AdaptBy(type = JsonAdaptor.class)
//	@Filters({ @By(type = AuthFilter.class) })
	public Object add(SnapUpOrder[] orders,HttpServletRequest request) {
		RedisManager.getInstance().getJedis().psubscribe(new SnapupOrderExpireSubscribe() , "*");
		String token = null;
		if (request.getAttribute("resolution") != null) {
			token = request.getAttribute("token").toString();
		}
		List<SnapUpResult> result = activitySnappingUpService.snapUpOrder(
				Arrays.asList(orders), token);
		if (result.isEmpty())
			return SnapUpResult.CODE.SUCCESS;
		else
			return result;
	}


}
