package m.w.frs.mgserver.service.snapup;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang3.StringUtils;
import org.nutz.dao.Cnd;
import org.nutz.ioc.loader.annotation.Inject;
import org.nutz.ioc.loader.annotation.IocBean;
import org.nutz.log.Log;
import org.nutz.log.Logs;

import m.w.frs.mgserver.domain.Order;
import m.w.frs.mgserver.domain.OrderDetail;
import m.w.frs.mgserver.domain.SnapUpResult;
import m.w.frs.mgserver.service.ProductService;
import m.w.sys.util.RedisManager;
import redis.clients.jedis.Jedis;

/**
 * 1 支付验证 snapUpOrder 返回确认列表 2 支付确认 3.改变订单明细状态
 * 
 * @author lusi
 *
 */
@IocBean()
public class ActivitySnappingUpService {

	private static final Log log = Logs.getLog(ActivitySnappingUpService.class);

	private static final int ORDER_EXPIRE = 60;

	@Inject
	private OrderService orderService;

	@Inject
	private ProductService productService;
	/**
	 * 取得用户订单 返回订单明细
	 * 
	 * @param orders
	 */
	public List<SnapUpResult> snapUpOrder(Order order) {
		List<OrderDetail> orderDetails = order.getOrderDetails();
		List<SnapUpResult> results = new ArrayList<>();
		for (Iterator<OrderDetail> iterator = orderDetails.iterator(); iterator.hasNext();) {
			OrderDetail orderDetail = (OrderDetail) iterator.next();
			orderDetail.setOrderCode(order.getOrderCode());
			// 1.活动是否存在
			if (!existActivity(orderDetail)) {
				results.add(new SnapUpResult(SnapUpResult.CODE.NONE_ACTIVITY, 0, orderDetail));
			} else
				// 2.产品是否存在
				if (!existProduct(orderDetail)) {
				results.add(new SnapUpResult(SnapUpResult.CODE.NONE_PRODUCT, 0, orderDetail));
			} else {
				// 1 记录订单 缓存超时时间为ORDER_EXPIRE
				this.saveOrderDetail(orderDetail);
				// 2 返回抢购结果
				SnapUpResult result = this.snapUpOne(orderDetail);
				// 返回给用户购买不成功，库存不足的信息
				if (result.getCode() != SnapUpResult.CODE.SUCCESS)
					results.add(result);
			}
		}
		return results;
	}

	/**
	 * 单个订单抢购
	 * 
	 * @param order
	 * @return
	 */
	private synchronized SnapUpResult snapUpOne(OrderDetail orderDetail) {
		Jedis jedis = null;
		try {
			jedis = RedisManager.getJedis();// cache
			log.info("stock key " + orderDetail.getStockKey());
			String sto=jedis.hget(orderDetail.getStockKey(), SnapUpResult.STOCK);
			if(StringUtils.isEmpty(sto)){
				return new SnapUpResult(SnapUpResult.CODE.STOCK_NULL, 0, orderDetail);
			}else{
				Integer stockOrigin = Integer.parseInt(sto);// 库存
				log.info(Thread.currentThread().getName() + " 库存  " + stockOrigin + "抢购数量 " + orderDetail.getCount());
				Integer stock = stockOrigin - orderDetail.getCount();
				log.info(Thread.currentThread().getName() + " 差值  " + stock);
				if (stock < 0) {
					log.info(Thread.currentThread().getName() + " key " + orderDetail.getOrderDetailKey() + " 库存不足  ");
					// jedis.incr(Consts.REDIS_ORDER + "notenough");
					return new SnapUpResult(SnapUpResult.CODE.STOCK_NOT_ENOUGH, stockOrigin, orderDetail);
				} else {
					jedis.hset(orderDetail.getStockKey(), SnapUpResult.STOCK, stock + "");
					log.info(Thread.currentThread().getName() + " key " + orderDetail.getOrderDetailKey() + " 该商品抢购成功 库存还剩 "
							+ stock);
					return new SnapUpResult(SnapUpResult.CODE.SUCCESS, stock, orderDetail);
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
			return new SnapUpResult(SnapUpResult.CODE.EXCEPTION, 0, orderDetail);
		} finally {
			RedisManager.returnJedis(jedis);
		}
	}

	/**
	 * 确认支付的明细 持久化内存 其余未确认项 过期
	 * 
	 * @param orders
	 * @param token
	 * @return
	 */
	public void confirmSnapupResult(Order order) {
		for (Iterator iterator = order.getOrderDetails().iterator(); iterator.hasNext();) {
			OrderDetail orderDetail = (OrderDetail) iterator.next();
			RedisManager.persist(orderDetail.getOrderDetailKey());// 取消订单过期时间
		}
	}

	/**
	 * 成功支付回调 更新订单状态 已支付
	 * 
	 * @param snapUp
	 */
	private void sanpupSuccess(String orderCode) {
		//1.取得订单信息从mysql
		Order order=orderService.fetch(Cnd.where("orderCode", "is", orderCode));
		order.setStatus(Order.Status.PAID);
		orderService.update(order);
		//2 更新myslq库存
		for (Iterator iterator = order.getOrderDetails().iterator(); iterator.hasNext();) {
			OrderDetail orderDetail = (OrderDetail) iterator.next();
			String stock=	RedisManager.hget(orderDetail.getActivityKey(), SnapUpResult.STOCK);
			if(!StringUtils.isEmpty(stock)){
				productService.updateProductStock(orderDetail.getProductCode(), Integer.parseInt(stock));
			}
		
		}
	
	}

	/**
	 * 记录用户订单
	 * 
	 * @param snapUp
	 */
	private void saveOrderDetail(OrderDetail detail) {
		log.info("order key " + detail.getOrderDetailKey());
		Map<String,String> hash=new HashMap<>();
		hash.put("count", detail.getCount() + "");
		hash.put("activityId", detail.getActivityId()+"");
		hash.put("productCode", detail.getProductCode());
		RedisManager.hmset(detail.getOrderDetailKey(), hash);
		RedisManager.expire(detail.getOrderDetailKey(), ORDER_EXPIRE);
	}

	/**
	 * 订单的活动是否有效
	 * 
	 * @param snapUp
	 */
	private boolean existActivity(OrderDetail snapUp) {
		log.info("activity key " + snapUp.getActivityKey());
		if (RedisManager.keys(snapUp.getActivityKey() + "*") == null
				|| RedisManager.keys(snapUp.getActivityKey() + "*").isEmpty()) {
			return false;
		} else
			return true;
	}

	/**
	 * 订单的产品是否有效
	 * 
	 * @param snapUp
	 */
	private boolean existProduct(OrderDetail snapUp) {
		log.info("activity_product key " + snapUp.getStockKey());
		return RedisManager.exists(snapUp.getStockKey());
	}

}
