package m.w.frs.mgserver.service.snapup;

import java.util.List;

import org.apache.commons.lang3.StringUtils;
import org.nutz.log.Log;
import org.nutz.log.Logs;

import m.w.frs.mgserver.domain.OrderDetail;
import m.w.frs.mgserver.domain.SnapUpResult;
import m.w.sys.util.RedisManager;
import redis.clients.jedis.JedisPubSub;

public class SnapupOrderExpireSubscribe extends JedisPubSub {

	private static final Log log = Logs.getLog(SnapupOrderExpireSubscribe.class);

	// 初始化按表达式的方式订阅时候的处理
	public void onPSubscribe(String pattern, int subscribedChannels) {
		log.info(pattern + "=" + subscribedChannels);
	}

	// 取得按表达式的方式订阅的消息后的处理
	public void onPMessage(String pattern, String channel, String message) {
		try {
			log.info(pattern + "=" + channel + "=" + message + " ");
			if (!StringUtils.isEmpty(message)) {
				List<String> list = RedisManager.hmget(message, "activityId", "productCode", "count");
				if (list != null && !list.isEmpty()) {
					OrderDetail detail = new OrderDetail();
					detail.setActivityId(Integer.parseInt(list.get(0)));
					detail.setProductCode(list.get(1));
					String coun = list.get(2);
					if (!StringUtils.isEmpty(coun)) {
						int count = Integer.parseInt(coun);
						add(detail, count);
					}
				}
			}
		} catch (Exception e) {
			log.error("订单过期触发 抢购数量恢复时 异常 " + e.getMessage());
		}

	}

	private synchronized void add(OrderDetail detail, int count) {
			String stockNow = RedisManager.hget(detail.getStockKey(), SnapUpResult.STOCK);
			if (!StringUtils.isEmpty(stockNow)) {
				stockNow += count;
			}
			RedisManager.hset(detail.getStockKey(), SnapUpResult.STOCK, stockNow);
		}
	}

}